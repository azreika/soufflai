#define EULER 2.71828
#define ETA 1
#define N_EPOCHS 100

#define Step number
#define Epoch number

.type InputID = number
.type NodeID = number
.type EdgeID = number

/***
 * Configuration
 */
.decl inputValue(id:InputID, node:NodeID, value:float)
.decl targetValue(id:InputID, node:NodeID, value:float)
.decl nodeBias(node:NodeID, value:float)
.decl node(id:NodeID, layer:number, index:number)
.decl edge(id:EdgeID, x:NodeID, y:NodeID)
.decl initialEdgeWeight(edge:EdgeID, initial_weight:float)

.input inputValue
.input targetValue
.input nodeBias
.input node
.input edge
.input initialEdgeWeight

/***
 * Input cleanup
 */
// Add in a dummy node to pass data into input layer
node(-1, -1, 0).

.decl validInputID(input_id:InputID)
validInputID(id) :- inputValue(id, _, _).

.decl orderedInput(input_id:InputID, step:Step)
orderedInput(input_id, $) :- validInputID(input_id).

// Add in dummy edges from dummy node to input layer
.decl dummyEdge(id:EdgeID, input_node:NodeID)
dummyEdge(-($+1), input_node) :- inputValue(_, input_node, _).
edge(id, -1, input_node) :- dummyEdge(id, input_node).

// Set up initial edge weights
// TODO: why choice domain necessary?
.decl edgeWeight(epoch:Epoch, step:Step, edge:EdgeID, weight:float) choice-domain (epoch, step, edge)

// - Epoch iteration

// -- First epoch
edgeWeight(0, start_step, edge, weight) :-
    start_step = min step : orderedInput(_, step),
    initialEdgeWeight(edge, weight).

// -- Other epochs
edgeWeight(epoch, start_step, edge, weight) :-
    epoch = prev_epoch + 1,
    validEpoch(epoch),
    start_step = min step : orderedInput(_, step),
    max_step = max step : orderedInput(_, step),
    newEdgeWeight(prev_epoch, max_step, edge, weight).

// - Step iteration

// -- Connect inputs to input nodes
edgeWeight(epoch, step, dummy_edge, value) :-
    validEpoch(epoch),
    orderedInput(input_id, step),
    dummyEdge(dummy_edge, input_node),
    inputValue(input_id, input_node, value).

// -- Other steps
edgeWeight(epoch, step, edge, weight) :-
    step = prev_step + 1,
    validStep(step),
    step != min s : orderedInput(_, s),
    !dummyEdge(edge, _),
    newEdgeWeight(epoch, prev_step, edge, weight).

.decl validStep(step:Step)
validStep(step) :- orderedInput(_, step).

.decl validEpoch(epoch:Epoch)
validEpoch(0).
validEpoch(e + 1) :- validEpoch(e), e < N_EPOCHS - 1.

/***
 * Forward propagation
 */
.decl forward(epoch:Epoch, step:Step, node:NodeID, value:float)
// Value of dummy start node is 1
forward(epoch, step, -1, 1) :- validEpoch(epoch), validStep(step).
forward(epoch, step, node, value + bias) :-
    node(node, layer, _),
    nodeBias(node, bias),
    forwardInductive(epoch, step, node, value, max_index),
    // stopping index is index of max prev layer node
    max_index = max index : { node(_, layer-1, index) }.

.decl activatedForward(epoch:Epoch, step:Step, node:NodeID, value:float)
activatedForward(epoch, step, node, value) :-
    forward(epoch, step, node, initial),
    node(node, layer, _),
    max_layer = max l : node(_, l, _),
    sigmoid = 1/(1+EULER^(-initial)),

    // sigmoid for output layer
    ((layer = max_layer, value = sigmoid);

    // sigmoid for hidden layers
     (layer < max_layer, layer > 0, value = sigmoid);

    // input nodes shouldnt change
     (layer <= 0, value = initial)).

// Inductive step to sum up all incoming values
// Induces an ordering based on previous layer indices
.decl forwardInductive(epoch:Epoch, step:Step, node:NodeID, rolling_value:float, index:number)
forwardInductive(epoch, step, node, 0.0, -1) :- validEpoch(epoch), validStep(step), node(node, _, _).
forwardInductive(epoch, step, node, prev_value + x1_value * weight, index) :-
    index = prev_index + 1,
    node(x1, _, index),
    edge(edge, x1, node),
    edgeWeight(epoch, step, edge, weight),
    forwardInductive(epoch, step, node, prev_value, prev_index),
    activatedForward(epoch, step, x1, x1_value).

/***
 * Back propagation
 */
.decl newEdgeWeight(epoch:Epoch, step:Step, edge:EdgeID, weight:float)
newEdgeWeight(epoch, step, edge, old_weight - ETA * deltaErrorVsWeight) :-
    edge(edge, _, _),
    edgeWeight(epoch, step, edge, old_weight),
    edgeDeltaErrorVsOut(epoch, step, edge, deltaErrorVsOut),
    edgeDeltaOutVsNet(epoch, step, edge, deltaOutVsNet),
    edgeDeltaNetVsWeight(epoch, step, edge, deltaNetVsWeight),
    deltaErrorVsWeight = deltaErrorVsOut * deltaOutVsNet * deltaNetVsWeight.

.decl edgeDeltaOutVsNet(epoch:Epoch, step:Step, edge:EdgeID, delta:float)
edgeDeltaOutVsNet(epoch, step, edge, delta) :-
    edge(edge, _, y),
    activatedForward(epoch, step, y, out),
    delta = out * (1 - out).

.decl edgeDeltaNetVsWeight(epoch:Epoch, step:Step, edge:EdgeID, delta:float)
edgeDeltaNetVsWeight(epoch, step, edge, delta) :-
    edge(edge, x, _),
    activatedForward(epoch, step, x, out),
    delta = out.

.decl edgeDeltaErrorVsOut(epoch:Epoch, step:Step, edge:EdgeID, delta:float)
// For output layer
edgeDeltaErrorVsOut(epoch, step, edge, delta) :-
    layer = max l : node(_, l, _),
    node(y, layer, _),
    targetValue(input_id, y, target),
    orderedInput(input_id, step),
    activatedForward(epoch, step, y, actual),
    edge(edge, _, y),
    delta = actual - target.

// For hidden layers
edgeDeltaErrorVsOut(epoch, step, edge, delta) :-
    edge(edge, _, y),
    node(y, layer, _),
    edgeDeltaErrorVsOutInductive(epoch, step, edge, delta, max_index),
    max_index = max idx : { node(_, layer+1, idx) }.

// Inductive relation to find dError/dOut for each hidden layer node
// Recursive sum aggregate of previous backpropagated error values
.decl edgeDeltaErrorVsOutInductive(epoch:Epoch, step:Step, edge:EdgeID, rolling_delta:float, index:number)
edgeDeltaErrorVsOutInductive(epoch, step, edge, 0, -1) :-
    validEpoch(epoch),
    validStep(step),
    edge(edge, _, y),
    node(y, layer, _),
    layer < max l : node(_, l, _).

edgeDeltaErrorVsOutInductive(epoch, step, edge, old_delta + cur_delta, index) :-
    edge(edge, _, y),
    edge(next_edge, y, z),
    node(z, _, index),
    edgeDeltaErrorVsOutInductive(epoch, step, edge, old_delta, old_index),
    edgeWeight(epoch, step, next_edge, sub_delta3),
    edgeDeltaOutVsNet(epoch, step, next_edge, sub_delta2),
    edgeDeltaErrorVsOut(epoch, step, next_edge, sub_delta1),
    index = old_index + 1,
    cur_delta = sub_delta1 * sub_delta2 * sub_delta3.

/**
 * Output
 */
.decl finalEdgeWeight(edge:EdgeID, weight:float)
finalEdgeWeight(edge, weight) :-
    newEdgeWeight(epoch, step, edge, weight),
    epoch = max e : newEdgeWeight(e, _, _, _),
    step = max s : newEdgeWeight(epoch, s, _, _).
.output finalEdgeWeight

.decl totalError(epoch:Epoch, error:float)
.output totalError
totalError(epoch, error) :-
    validEpoch(epoch),
    (epoch = 0 ; epoch = N_EPOCHS-1),
    step = max s : validStep(s),
    error = 0.5 * (sum (x * x) : {
        x = target - actual,
        targetValue(input_id, node, target),
        orderedInput(input_id, step),
        activatedForward(epoch, step, node, actual)}).
